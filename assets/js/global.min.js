/**
 * Add the accessible responsive menu.
 *
 * @version 1.1.3
 *
 * @author StudioPress
 * @link https://github.com/copyblogger/responsive-menus/
 * @license GPL-2.0-or-later
 * @package GenesisSample
 */
!function(a,r,e){"use strict";
/**
	 * Add menu toggle button to appropriate menus.
	 *
	 * @param {toggleButtons} Object of menu buttons to use for toggles.
	 */
function t(e){if(
// Apply sub menu toggle to each sub-menu found in the menuList.
r(m(C)).find(".sub-menu").before(e.submenu),null!==y){var n=C.others.concat(y[0]);
// Only add menu button the primary menu and navs NOT in the combine variable.
r(m(n)).before(e.menu)}else
// Apply the main menu toggle to all menus in the list.
r(m(C.others)).before(e.menu)}
/**
	 * Add the responsive menu class.
	 */function i(){r(m(C)).addClass(M)}
/**
	 * Execute our responsive menu functions on window resizing.
	 */function u(){var e=r('button[id^="genesis-mobile-"]').attr("id");void 0!==e&&(f(e),s(e),d(e),n(e))}
/**
	 * Add the nav- class of the related navigation menu as
	 * an ID to associated button (helps target specific buttons outside of context).
	 */function o(){var e=r(this),n=e.next("nav"),s="class";e.attr("id","genesis-mobile-"+r(n).attr(s).match(/nav-\w*\b/))}
/**
	 * Combine our menus if the mobile menu is visible.
	 *
	 * @params buttons
	 */function n(e){
// Exit early if there are no menus to combine.
if(null!=y){
// Split up the menus to combine based on order of appearance in the array.
var s=y[0],n=r(y).filter(function(e){if(0<e)return e});
// If the responsive menu is active, append items in 'combinedMenus' object to the 'primaryMenu' object.
"none"!==h(e)?(r.each(n,function(e,n){r(n).find(".menu > li").addClass("moved-item-"+n.replace(".","")).appendTo(s+" ul.genesis-nav-menu")}),r(m(n)).hide()):(r(m(n)).show(),r.each(n,function(e,n){r(".moved-item-"+n.replace(".","")).appendTo(n+" ul.genesis-nav-menu").removeClass("moved-item-"+n.replace(".",""))}))}}
/**
	 * Action to happen when the main menu button is clicked.
	 */function l(){var e=r(this);p(e,"aria-pressed"),p(e,"aria-expanded"),e.toggleClass("activated"),e.next("nav").slideToggle("fast")}
/**
	 * Action for submenu toggles.
	 */function c(){var e=r(this),n=e.closest(".menu-item").siblings();p(e,"aria-pressed"),p(e,"aria-expanded"),e.toggleClass("activated"),e.next(".sub-menu").slideToggle("fast"),n.find("."+k).removeClass("activated").attr("aria-pressed","false"),n.find(".sub-menu").slideUp("fast")}
/**
	 * Activate/deactivate superfish.
	 *
	 * @params buttons
	 */function s(e){var n=r("."+M+" .js-superfish"),s="destroy";"function"==typeof n.superfish&&("none"===h(e)&&(s={delay:100,animation:{opacity:"show",height:"show"},dropShadows:!1,speed:"fast"}),n.superfish(s))}
/**
	 * Modify skip link to match mobile buttons.
	 *
	 * @param buttons
	 */function d(o){
// Start with an empty array.
var e=g();
// Exit out if there are no menu items to update.
0<!r(e).length||r.each(e,function(e,n){var s=n.replace(".",""),a="genesis-"+s,t="genesis-mobile-"+s;"none"==h(o)&&(a="genesis-mobile-"+s,t="genesis-"+s);var i=r('.genesis-skip-link a[href="#'+a+'"]');if(null!==y&&n!==y[0]&&i.toggleClass("skip-link-hidden"),0<i.length){var u=i.attr("href");u=u.replace(a,t),i.attr("href",u)}})}
/**
	 * Close all the menu toggles if buttons are hidden.
	 *
	 * @param buttons
	 */function f(e){if("none"!==h(e))return!0;r("."+x+", ."+M+" .sub-menu-toggle").removeClass("activated").attr("aria-expanded",!1).attr("aria-pressed",!1),r("."+M+", ."+M+" .sub-menu").attr("style","")}
/**
	 * Generic function to get the display value of an element.
	 *
	 * @param  {id} $id ID to check
	 * @return {string}     CSS value of display property
	 */function h(e){var n=a.getElementById(e),s;return window.getComputedStyle(n).getPropertyValue("display")}
/**
	 * Toggle aria attributes.
	 *
	 * @param  {button} $this     passed through
	 * @param  {aria-xx} attribute aria attribute to toggle
	 * @return {bool}           from _ariaReturn
	 */function p(e,n){e.attr(n,function(e,n){return"false"===n})}
/**
	 * Helper function to return a comma separated string of menu selectors.
	 *
	 * @param {itemArray} Array of menu items to loop through.
	 * @param {ignoreSecondary} boolean of whether to ignore the 'secondary' menu item.
	 * @return {string} Comma-separated string.
	 */function m(e){var n;return r.map(e,function(e,n){return e}).join(",")}
/**
	 * Helper function to return a group array of all the menus in
	 * both the 'others' and 'combine' arrays.
	 *
	 * @return {array} Array of all menu items as class selectors.
	 */function g(){
// Start with an empty array.
var s=[];
// If there are menus in the 'menusToCombine' array, add them to 'menuList'.
return null!==y&&r.each(y,function(e,n){s.push(n.valueOf())}),
// Add menus in the 'others' array to 'menuList'.
r.each(C.others,function(e,n){s.push(n.valueOf())}),0<s.length?s:null}var v="undefined"==typeof genesis_responsive_menu?"":genesis_responsive_menu,b=v.menuClasses,C={},y=[];
/**
	 * Validate the menus passed by the theme with what's being loaded on the page,
	 * and pass the new and accurate information to our new data.
	 *
	 * @param {genesisMenusUnchecked} Raw data from the localized script in the theme.
	 * @return {array} genesisMenus array gets populated with updated data.
	 * @return {array} menusToCombine array gets populated with relevant data.
	 */r.each(b,function(t){
// Mirror our group object to populate.
C[t]=[],
// Loop through each instance of the specified menu on the page.
r.each(this,function(e,n){var a=n,s=r(n);
// If there is more than one instance, append the index and update array.
1<s.length?r.each(s,function(e,n){var s=a+"-"+e;r(this).addClass(s.replace(".","")),C[t].push(s),"combine"===t&&y.push(s)}):1==s.length&&(C[t].push(a),"combine"===t&&y.push(a))})}),
// Make sure there is something to use for the 'others' array.
void 0===C.others&&(C.others=[]),
// If there's only one menu on the page for combining, push it to the 'others' array and nullify our 'combine' variable.
1==y.length&&(C.others.push(y[0]),C.combine=null,y=null);var w={},x="menu-toggle",k="sub-menu-toggle",M="genesis-responsive-menu";
// Initialize.
w.init=function(){
// Exit early if there are no menus to do anything.
if(0!=r(g()).length){var e=void 0!==v.menuIconClass?v.menuIconClass:"dashicons-before dashicons-menu",n=void 0!==v.subMenuIconClass?v.subMenuIconClass:"dashicons-before dashicons-arrow-down-alt2",s={menu:r("<button />",{class:x,"aria-expanded":!1,"aria-pressed":!1}).append(v.mainMenu),submenu:r("<button />",{class:k,"aria-expanded":!1,"aria-pressed":!1}).append(r("<span />",{class:"screen-reader-text",text:v.subMenu}))};
// Add the responsive menu class to the active menus.
i(),
// Add the main nav button to the primary menu, or exit the plugin.
t(s),
// Setup additional classes.
r("."+x).addClass(e),r("."+k).addClass(n),r("."+x).on("click.genesisMenu-mainbutton",l).each(o),r("."+k).on("click.genesisMenu-subbutton",c),r(window).on("resize.genesisMenu",u).triggerHandler("resize.genesisMenu")}},r(a).ready(function(){null!==g()&&w.init()})}(document,jQuery),// Skip links mobile fix
/*
 * May not be necessary in the future depending
 * on browser support.
 * https://axesslab.com/skip-links/
 *
 * Author: Paul J. Adam
 * Link: http://www.pauljadam.com/
 */
$(".genesis-skip-link a").click(function(e){e.preventDefault(),$(":header:first").attr("tabindex","-1").focus()});