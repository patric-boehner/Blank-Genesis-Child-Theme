/*! loadCSS. [c]2017 Filament Group, Inc. MIT License */
/* This file is meant as a standalone workflow for
- testing support for link[rel=preload]
- enabling async CSS loading in browsers that do not support rel=preload
- applying rel preload css once loaded, whether supported or not.
*/
!function(n){"use strict";
// rel=preload support test
n.loadCSS||(n.loadCSS=function(){});
// define on the loadCSS obj
var o=loadCSS.relpreload={};
// rel=preload feature support test
// runs once and returns a function for compat purposes
// if unsupported, run the polyfill
if(o.support=function(){var e;try{e=n.document.createElement("link").relList.supports("preload")}catch(t){e=!1}return function(){return e}}(),
// if preload isn't supported, get an asynchronous load by using a non-matching media attribute
// then change that media back to its intended value on load
o.bindMediaToggle=function(t){function e(){
// unbind listeners
t.addEventListener?t.removeEventListener("load",e):t.attachEvent&&t.detachEvent("onload",e),t.setAttribute("onload",null),t.media=a}
// bind load handlers to enable media
// remember existing media attr for ultimate state, or default to 'all'
var a=t.media||"all";t.addEventListener?t.addEventListener("load",e):t.attachEvent&&t.attachEvent("onload",e),
// Set rel and non-applicable media type to start an async request
// note: timeout allows this to happen async to let rendering continue in IE
setTimeout(function(){t.rel="stylesheet",t.media="only x"}),
// also enable media after 3 seconds,
// which will catch very old browsers (android 2.x, old firefox) that don't support onload on link
setTimeout(e,3e3)},
// loop through link elements in DOM
o.poly=function(){
// double check this to prevent external calls from running
if(!o.support())for(var t=n.document.getElementsByTagName("link"),e=0;e<t.length;e++){var a=t[e];
// qualify links to those with rel=preload and as=style attrs
"preload"!==a.rel||"style"!==a.getAttribute("as")||a.getAttribute("data-loadcss")||(
// prevent rerunning on link
a.setAttribute("data-loadcss",!0),
// bind listeners to toggle media back
o.bindMediaToggle(a))}},!o.support()){
// run once at least
o.poly();
// rerun poly on an interval until onload
var t=n.setInterval(o.poly,500);n.addEventListener?n.addEventListener("load",function(){o.poly(),n.clearInterval(t)}):n.attachEvent&&n.attachEvent("onload",function(){o.poly(),n.clearInterval(t)})}
// commonjs
"undefined"!=typeof exports?exports.loadCSS=loadCSS:n.loadCSS=loadCSS}("undefined"!=typeof global?global:this);